#!/bin/bash
#title                    :menu.sh
#description              :This script is for editing jobs via friendlier interface 
#author		          :Gabriel Saliev (40441590)
#date                     :2020.10.05
#version                  :0.1
#Made for		  :CSN08116 2020, coursework
#contributors(1)          :Markus Meresma (40439107)
#contributors(2)          :Dávid Gábor Uzonyi(40429825) 


#1.Select job to edit
#2.Save job parameters to a variable
#3.Ask user which parameters he wants to edit
#Create new string with the edited parameters
#remove the non modified cronjob
#Then insert the newly created job 

file=$(crontab -l)

function main () {

    #display jobs
    crontab -l | grep -v "^#"
    get_select_job

    #while loop and ask if user wants to edit another job?
    edit_saved_job
    
}
function get_select_job()
{
    #validation for select_job_input length, cant be less than 10 chars
    echo "Select one of the jobs displayed  (write it down): "
    read select_job_input

    if [[ ${#select_job_input} -lt 10 ]];
    then
	echo "You must enter a correct cronjob."
	get_select_job
    fi
    
    validate_select_job
}


function validate_select_job() {
    #if selected job does not exist in crontab string
    #display error message
    
    if [[ $file == *"$select_job_input"* ]];
    then
	#tokenize job 
	job_tokens=( $select_job_input )
	
    else
	echo "This job does not exist."
	get_select_job
    fi
}

function edit_saved_job(){
    # call the functions from insert job
    # 3.ask user which parameters he wants to edit
    # split saved_job to tokens
    # Tokenize the row
    # change tokens based on the parameters the user wants to edit
    while true;
    do
	
	
	echo "
Which parameters would you like to edit?
1. Minutes
2. Hour
3. Day of month
4. Month of year
5. Day of week
0. Done    

Enter choice [1 | 2 | 3 | 4 | 5 | 0]: "


	#put it in loop and ask the user if he wants to edit another job
	read numchoice
	
	case $numchoice in
	    "1" ) edit_minutes
		  ;;
	    "2" ) edit_hour
		  ;;
	    "3" ) edit_day_of_month
		  ;;
	    "4" ) edit_month_of_year
		  ;;
	    "5" ) edit_day_of_week
		  ;;
	    "0" ) break
		  ;;
	    * ) echo -n "You entered an incorrect option. Please try again." ;;
	esac

    done
    
    #remove the job
    crontab -l | sed "/$select_job_input/d" | crontab -

    (crontab -l ; echo ${job_tokens[@]})| crontab -
}



#all the functions below need the validation from insert_job


function edit_minutes(){
    #minutes validation
    while true;
    do
	    echo "Enter the new minutes (1-59): "
	    read minutes

	    if [[ minutes -ge 1 ]] && [[ minutes -le 59 ]];
	    then
		break
	    else
		echo "You must enter a number between 1 an 59."
	    fi
    done
       
    job_tokens[0]=$minutes
    echo "Minutes edited successfully."
}

function edit_hour(){
    #hour validation
    while true;
    do
	echo "Enter the new hour (0-23):"
	read hour

	if [[ hour -ge 0 ]] && [[ hour -le 23 ]];
	then
	    break
	else
	    echo "You must enter a number between 0 and 23."
	fi
    done
    
    job_tokens[1]=$hour
    echo "Hour edited successfully."
}

function edit_day_of_month(){
    
    while true;
    do
	echo "Enter the new day of month (1-31) (enter * for not specified): "
	read day_of_month

	if [[ day_of_month -ge 1 ]] || [[ day_of_month -le 31 ]];
	then
	    break
	elif [[ "$day_of_month" == "*" ]] && [[ -z "$day_of_month" ]];
	then
	    break
	else
	    echo "You must enter a number between 1 and 31."

	fi
    done
   
    job_tokens[2]=$day_of_month
    echo "Day of month edited successfully."
}

function edit_month_of_year(){

        
    while true;
    do
	echo "Enter the new month of year (1-12) (enter * for not specified): "
	read month_of_year

	if [[ month_of_year -ge 1 ]] && [[ month_of_year -le 12 ]];
	then
	    break
	elif [[ "$month_of_year" == "*" ]] || [[ -z "$month_of_year" ]];
	then
	    break
	else
	    echo "You must enter a number between 1 and 12."
	fi
    done
    
    job_tokens[3]=$month_of_year
    echo "Month of year edited successfully."
}

function edit_day_of_week() {
    
    while true;
    do
	echo "Enter the new day of week (1-7) (enter * for not specified): "
	read day_of_week

	if [[ day_of_week -ge 1 ]] && [[ day_of_week -le 7 ]];
	then
	    break
	elif [[ "$day_of_week" == "*" ]] || [[ -z "$day_of_week" ]];
	then
	    break
	else
	    echo "You must enter a number between 1 and 7."
	fi
    done
    
    job_tokens[4]=$day_of_week
    echo "Day of week edited successfully."
}

main
source `pwd`"/exit"    
